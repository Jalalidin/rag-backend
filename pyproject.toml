[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi[standard]<1.0.0,>=0.114.2",
    "python-multipart<1.0.0,>=0.0.7",
    "email-validator<3.0.0.0,>=2.1.0.post1",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "tenacity<9.0.0,>=8.2.3",
    "pydantic>2.0",
    "emails<1.0,>=0.6",
    "jinja2<4.0.0,>=3.1.4",
    "alembic<2.0.0,>=1.12.1",
    "httpx<1.0.0,>=0.25.1",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "sqlmodel<1.0.0,>=0.0.21",
    # Pin bcrypt until passlib supports the latest
    "bcrypt==4.0.1",
    "pydantic-settings>=2.2.1,<3.0.0",
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",
    "pyjwt<3.0.0,>=2.8.0",
    "pytz>=2024.2",
    "cryptography>=44.0.0",
    "python-dotenv>=1.0.1",
    "uvicorn>=0.34.0",
    "python-jose[cryptography]>=3.3.0",
    "langchain>=0.3.13",
    "langchain-community>=0.3.13",
    "langchain-openai>=0.2.14",
    "llama-index-core>=0.12.8",
    "llama-index-embeddings-openai>=0.3.1",
    "llama-index-vector-stores-qdrant>=0.4.2",
    "qdrant-client>=1.12.1",
    "pypdf>=5.1.0",
    "docx2txt>=0.8",
    "langchain-google-genai>=0.0.12",
    "langchain-mistralai>=0.1.4",
    "Pillow>=10.3.0",
    "lxml>=5.2.2",
    "openpyxl>=3.1.2",
    "llama-index-readers-file>=0.1.24",
    "langchain-anthropic>=0.1.10",
    "google-api-python-client>=2.133.0",
    "google-search-results>=2.4.2",
    "celery>=5.4.0",
    "sentence-transformers>=3.3.1",
    "openai>=1.14.2",
    "prometheus-client>=0.21.1",
    "llama-index-llms-openai>=0.3.12",
]

[tool.uv]
index-url = "https://mirrors.aliyun.com/pypi/simple/"

dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",
    "mypy<2.0.0,>=1.8.0",
    "ruff<1.0.0,>=0.2.2",
    "pre-commit<4.0.0,>=3.6.2",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
    "coverage<8.0.0,>=7.4.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.hatch.build.targets.wheel]
packages = ["app"]
